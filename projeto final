#include <string>
#include <vector>
#include<iostream>
#include<iterator>
#include <algorithm>

using namespace std;
class Contato
{
private:
    std::string tel;
    std::string email;
public:
    std::string nome;
  
    Contato(const std::string &nome, const std::string &tel, const std::string &email);

    std::string getNome();

    void setNome(const std::string &nome);

    std::string getTel();

    void setTel(const std::string &tel);

    std::string getEmail();

    void setEmail(const std::string &email);

    std::string toString();
    friend ostream& operator<<(ostream &out, Contato &c) {
      out << "Nome: "<< c.nome << endl
          << "Telefone: "<< c.tel << endl
          << "E-mail: " << c.email << endl;
      return out;
    }
    

};
class Agenda
{
public:
    std::vector<Contato*> Contatos = std::vector<Contato*>();

    Agenda();

    std::vector<Contato*> getContatos();

    void setContatos(std::vector<Contato*> &Contatos);

    void addCont(Contato *c);
    void mostra(string nome);
    void removeCont(string nome);
    void mostraLista();
    void compara();
};
	Contato::Contato(const std::string &nome, const std::string &tel, const std::string &email)
	{
		this->nome = nome;
		this->tel = tel;
		this->email = email;
	}

	std::string Contato::getNome()
	{
		return nome;
	}

	void Contato::setNome(const std::string &nome)
	{
		this->nome = nome;
	}

	std::string Contato::getTel()
	{
		return tel;
	}

	void Contato::setTel(const std::string &tel)
	{
		this->tel = tel;
	}

	std::string Contato::getEmail()
	{
		return email;
	}

	void Contato::setEmail(const std::string &email)
	{
		this->email = email;
	}

	std::string Contato::toString()
	{
		return "Nome: " + nome + "\n" + "Tel=" + tel + "\n" + "E-mail=" + email;
	}

Agenda::Agenda(){}

void Agenda::setContatos(std::vector<Contato*> &Contatos)
{
    this->Contatos = Contatos;
}

void Agenda::addCont(Contato *c)
{  
  Contatos.push_back(c);
}

void Agenda::mostra(string nome)
{
    int controle=0;
    for (int i = 0; i < Contatos.size(); i++)
    {
      Contato *aux = Contatos[i];
        if(aux->getNome()==nome){
          cout<<*aux<<"\n";
          controle=1;
        }
    }
    if(controle==0){
      cout<<"Contato nao encontrado.\n";
    }
    
}

void Agenda::compara()
{
   int tam = sizeof(Contatos)/sizeof(Contatos[0]);

  sort(Contatos.begin(),Contatos.end(),[](auto a, auto b){
    return(a->getNome()<b->getNome());
  });

}

void Agenda::removeCont(string nome)
{
    int controle=0;
    for (int i = 0; i < Contatos.size(); i++)
    {
        Contato *aux = Contatos[i];
        if (aux->getNome() == nome)
        {   controle=1;
            Contatos.erase(Contatos.begin() + i);
            cout<<"Contato removido com sucesso.\n";
        }
    }
    if(controle==0){
      cout<<"Contato nao encontrado.\n";
    }
}

void Agenda::mostraLista()
{   
    Agenda::compara();
     for (int i = 0; i < Contatos.size(); i++)
    {
        Contato *aux = Contatos[i];
        cout<<*aux<<"\n";
    } 
}
int main(int argc, char *argv[])
{
    Contato *c1 = new Contato("Pedro Augusto","pedroagunto@hotmail.com","933001246");
    Contato *c2 = new Contato("Gustavo","gostodetrc@gmail.com","31984988956");
    Contato *c3 = new Contato("Thayron","gangangan@pgmlhr.com","989764544");
    Contato *c4 = new Contato("Gabriel","pcovbnna@ngr.com","318882544");
    Contato *c5 = new Contato("Pedro Souza","pedro.hfsouza@hotmail.com","3198802444");
    Contato *c6 = new Contato ("Augusto vendedor avon","avonaredes@revendedor.com","31984988956");
    string s= "Gabriel";
    Agenda *a = new Agenda();
    a->addCont(c6);
    a->addCont(c5);
    a->addCont(c4);
    a->addCont(c3);
    a->addCont(c2);
    a->addCont(c1);
    a->mostraLista();
    cout<<"*******************\n";
    a->mostra("Pedro Souza");
    cout<<"*******************\n";
    a->removeCont(s);
      cout << "\n\n" << endl;
    a->mostraLista();
    delete a;
}
